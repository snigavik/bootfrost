? 	Q(1), Q(2), Q(3), Q(4), Q(5), ~
	Q0G(1), Q0H(1), Q0T(1,1,1), ~
	E("a"), E("b"), E("c"), E("u"), E("v"), E("d"),  E("e"), ~
	Ec("a"), Ec("b"), Ec("c"), Ec("u"), Ec("v"), Ec("d"), Ec("e"), ~
	Euo("u"), Euo("v"), Euo("c"), Euo("e"), ~
	Eo("a"), Eo("b"), Eo("d"), ~
	dG(1, "u", 2), dG(2, "v", 3), dG(4, "b", 2), dG(1, "a", 4), ~
	dG(3, "b", 2), dG(4, "c", 5), dG(3, "a", 4), dG(5, "d", 1), ~
	dG(5, "e", 3), ~
	NoFG(2, "a"), NoFG(4, "a"), NoFG(5, "a"), NoFG(1, "b"), NoFG(2, "b"), ~
	NoFG(5, "b"), NoFG(1, "c"), NoFG(2, "c"), NoFG(3, "c"), NoFG(5, "c"), ~
	NoFG(2, "u"), NoFG(3, "u"), NoFG(4, "u"), NoFG(5, "u"), NoFG(1, "v"), ~
	NoFG(3, "v"), NoFG(4, "v"), NoFG(5, "v"), NoFG(1, "d"), NoFG(2, "d"), ~
	NoFG(3, "d"), NoFG(4, "d"), NoFG(1, "e"), NoFG(2, "e"), NoFG(3, "e"), NoFG(4, "e"), ~
	FG(1, "a"), FG(1, "u"), FG(2, "v"), FG(4, "b"), FG(3, "b"), FG(4, "c"), ~
	FG(3, "a"), FG(5, "d"), FG(5, "e"), ~
	dH(1, "u", 2), dH(2, "v", 3), dH(3, "a", 4), dH(4, "c", 5), ~
	dH(4, "b", 2), dH(5, "d", 1), ~
	NoFH(1, "a"), NoFH(2, "a"), NoFH(4, "a"), NoFH(5, "a"), NoFH(1, "b"), ~
	NoFH(2, "b"), NoFH(3, "b"), NoFH(5, "b"), NoFH(1, "c"), NoFH(2, "c"), ~
	NoFH(3, "c"), NoFH(5, "c"), NoFH(2, "u"), NoFH(3, "u"), NoFH(4, "u"), ~
	NoFH(5, "u"), NoFH(1, "v"), NoFH(3, "v"), NoFH(4, "v"), NoFH(5, "v"), ~
	NoFH(1, "d"), NoFH(2, "d"), NoFH(3, "d"), NoFH(4, "d"), ~
	NoFH(1, "e"), NoFH(2, "e"), NoFH(3, "e"), NoFH(4, "e"), NoFH(5, "e"), ~
	FH(3, "a"), FH(1, "u"), FH(2, "v"), FH(4, "c"), FH(4, "b"), FH(5, "d")
	# 1й вопрос. Добавляет в базу начальную тройку состояний
	! qH,qG Q0H(qH), Q0G(qG) 
		? T(qH,qH,qG)
	# 2й вопрос. Проверка условия остановки для управляемого события e
	# при успешном ответе в базу добавляется атом dead() c информацией по тройке состояний и событию, которые сюда привели
	! qH1,qH2,qG,e Ec(e), FH(qH1,e), NoFH(qH2,e), FG(qG,e), T(qH1,qH2,qG)
		? dead(qH1,qH2,qG,e)
	# 3й вопрос - проверка остановки машины поиска вывода
	! x,y,z,s dead(x,y,z,s)
	# 4й вопрос. Добавляем новую тройку состояний и переход в нее, 
	# если определены соответствующие переходы из состояний тройки T() в исходных автоматах для управляемого и НАБЛЮДАЕМОГО события
	# Добавляется переход по событию (e,e,e)
	! qH1,qH2,qG,e,qtH1,qtH2,qtG T(qH1,qH2,qG), Eo(e), dH(qH1,e,qtH1), dH(qH2,e,qtH2), dG(qG,e,qtG)
		? T(qtH1,qtH2,qtG), dT(qH1,qH2,qG,e,e,e,qtH1,qtH2,qtG)
	# 5й вопрос. Добавляем новую тройку состояний и переход в нее, 
	# если определен переход из ПЕРВОГО состояния тройки состояний соответствующего автомату H для управляемого и НЕНАБЛЮДАЕМОГО события
	# Добавляется переход по событию (e,eps,eps), eps - пустой символ (эпсилон)
	! qH1,qH2,qG,e,qtH1 T(qH1,qH2,qG), Euo(e), dH(qH1,e,qtH1)
		? T(qtH1,qH2,qG), dT(qH1,qH2,qG,e,eps,eps,qtH1,qH2,qG)
	# 6й вопрос. Добавляем новую тройку состояний и переход в нее, 
	# если определен переход из ВТОРОГО состояния тройки состояний соответствующего автомату H и 
	# должен быть определен соответствующий переход в автомате G для управляемого и НЕНАБЛЮДАЕМОГО события
	# Добавляется переход по событию (eps,e,e), eps - пустой символ (эпсилон)
	! qH1,qH2,qG,e,qtH2,qtG T(qH1,qH2,qG), Euo(e), dH(qH2,e,qtH2), dG(qG,e,qtG)
		? T(qH1,qtH2,qtG), dT(qH1,qH2,qG,eps,e,e,qH1,qtH2,qtG)
